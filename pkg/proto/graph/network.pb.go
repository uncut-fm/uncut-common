// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: graph/network.proto

package graph

import (
	user "github.com/uncut-fm/uncut-common/pkg/proto/auth/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNetworkByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *OffsetPagination `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *GetNetworkByUserIDRequest) Reset() {
	*x = GetNetworkByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkByUserIDRequest) ProtoMessage() {}

func (x *GetNetworkByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{0}
}

func (x *GetNetworkByUserIDRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNetworkByUserIDRequest) GetPagination() *OffsetPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type OffsetPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *OffsetPagination) Reset() {
	*x = OffsetPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetPagination) ProtoMessage() {}

func (x *OffsetPagination) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetPagination.ProtoReflect.Descriptor instead.
func (*OffsetPagination) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetPagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OffsetPagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type NetworkMembersInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Users      []*NetworkMemberUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *NetworkMembersInfoResponse) Reset() {
	*x = NetworkMembersInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMembersInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMembersInfoResponse) ProtoMessage() {}

func (x *NetworkMembersInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMembersInfoResponse.ProtoReflect.Descriptor instead.
func (*NetworkMembersInfoResponse) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkMembersInfoResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *NetworkMembersInfoResponse) GetUsers() []*NetworkMemberUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type NetworkMemberUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *user.User             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	NftsInCommon []*Nft                 `protobuf:"bytes,2,rep,name=nfts_in_common,json=nftsInCommon,proto3" json:"nfts_in_common,omitempty"`
	JoinedOn     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=joined_on,json=joinedOn,proto3" json:"joined_on,omitempty"`
}

func (x *NetworkMemberUser) Reset() {
	*x = NetworkMemberUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMemberUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMemberUser) ProtoMessage() {}

func (x *NetworkMemberUser) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMemberUser.ProtoReflect.Descriptor instead.
func (*NetworkMemberUser) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkMemberUser) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NetworkMemberUser) GetNftsInCommon() []*Nft {
	if x != nil {
		return x.NftsInCommon
	}
	return nil
}

func (x *NetworkMemberUser) GetJoinedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedOn
	}
	return nil
}

type Nft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContractAddress        string                 `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Price                  float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	MintedOn               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=minted_on,json=mintedOn,proto3" json:"minted_on,omitempty"`
	Status                 string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedOnBlock         int32                  `protobuf:"varint,8,opt,name=updated_on_block,json=updatedOnBlock,proto3" json:"updated_on_block,omitempty"`
	Currency               string                 `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	TokenId                string                 `protobuf:"bytes,10,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	StoreId                int32                  `protobuf:"varint,11,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Fee                    float64                `protobuf:"fixed64,12,opt,name=fee,proto3" json:"fee,omitempty"`
	CreatorAddress         string                 `protobuf:"bytes,13,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	Supply                 int32                  `protobuf:"varint,14,opt,name=supply,proto3" json:"supply,omitempty"`
	Balance                int32                  `protobuf:"varint,15,opt,name=balance,proto3" json:"balance,omitempty"`
	Name                   string                 `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                 `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	BlockchainDescription  string                 `protobuf:"bytes,18,opt,name=blockchain_description,json=blockchainDescription,proto3" json:"blockchain_description,omitempty"`
	Perks                  string                 `protobuf:"bytes,19,opt,name=perks,proto3" json:"perks,omitempty"`
	ImageUrl               string                 `protobuf:"bytes,20,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	BlockchainImageUrl     string                 `protobuf:"bytes,21,opt,name=blockchain_image_url,json=blockchainImageUrl,proto3" json:"blockchain_image_url,omitempty"`
	AnimationUrl           string                 `protobuf:"bytes,22,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"`
	BlockchainAnimationUrl string                 `protobuf:"bytes,23,opt,name=blockchain_animation_url,json=blockchainAnimationUrl,proto3" json:"blockchain_animation_url,omitempty"`
	Type                   string                 `protobuf:"bytes,24,opt,name=type,proto3" json:"type,omitempty"`
	Royalties              int32                  `protobuf:"varint,25,opt,name=royalties,proto3" json:"royalties,omitempty"`
	ShowOnWebsite          bool                   `protobuf:"varint,26,opt,name=show_on_website,json=showOnWebsite,proto3" json:"show_on_website,omitempty"`
	Password               string                 `protobuf:"bytes,27,opt,name=password,proto3" json:"password,omitempty"`
	DropAt                 string                 `protobuf:"bytes,28,opt,name=drop_at,json=dropAt,proto3" json:"drop_at,omitempty"`
	DropAtTime             *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=drop_at_time,json=dropAtTime,proto3" json:"drop_at_time,omitempty"`
	DropType               string                 `protobuf:"bytes,30,opt,name=drop_type,json=dropType,proto3" json:"drop_type,omitempty"`
	MintTransaction        string                 `protobuf:"bytes,31,opt,name=mint_transaction,json=mintTransaction,proto3" json:"mint_transaction,omitempty"`
	TemplateType           string                 `protobuf:"bytes,32,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	FeaturedByCreator      bool                   `protobuf:"varint,33,opt,name=featured_by_creator,json=featuredByCreator,proto3" json:"featured_by_creator,omitempty"`
	NftOwners              []*NftOwner            `protobuf:"bytes,34,rep,name=nft_owners,json=nftOwners,proto3" json:"nft_owners,omitempty"`
	NftCollection          *NftCollection         `protobuf:"bytes,35,opt,name=nft_collection,json=nftCollection,proto3" json:"nft_collection,omitempty"`
	CreatedBy              *user.User             `protobuf:"bytes,36,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *Nft) Reset() {
	*x = Nft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nft) ProtoMessage() {}

func (x *Nft) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nft.ProtoReflect.Descriptor instead.
func (*Nft) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{4}
}

func (x *Nft) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Nft) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Nft) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Nft) GetMintedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.MintedOn
	}
	return nil
}

func (x *Nft) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Nft) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Nft) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Nft) GetUpdatedOnBlock() int32 {
	if x != nil {
		return x.UpdatedOnBlock
	}
	return 0
}

func (x *Nft) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Nft) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *Nft) GetStoreId() int32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *Nft) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Nft) GetCreatorAddress() string {
	if x != nil {
		return x.CreatorAddress
	}
	return ""
}

func (x *Nft) GetSupply() int32 {
	if x != nil {
		return x.Supply
	}
	return 0
}

func (x *Nft) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Nft) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nft) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Nft) GetBlockchainDescription() string {
	if x != nil {
		return x.BlockchainDescription
	}
	return ""
}

func (x *Nft) GetPerks() string {
	if x != nil {
		return x.Perks
	}
	return ""
}

func (x *Nft) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Nft) GetBlockchainImageUrl() string {
	if x != nil {
		return x.BlockchainImageUrl
	}
	return ""
}

func (x *Nft) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

func (x *Nft) GetBlockchainAnimationUrl() string {
	if x != nil {
		return x.BlockchainAnimationUrl
	}
	return ""
}

func (x *Nft) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Nft) GetRoyalties() int32 {
	if x != nil {
		return x.Royalties
	}
	return 0
}

func (x *Nft) GetShowOnWebsite() bool {
	if x != nil {
		return x.ShowOnWebsite
	}
	return false
}

func (x *Nft) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Nft) GetDropAt() string {
	if x != nil {
		return x.DropAt
	}
	return ""
}

func (x *Nft) GetDropAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DropAtTime
	}
	return nil
}

func (x *Nft) GetDropType() string {
	if x != nil {
		return x.DropType
	}
	return ""
}

func (x *Nft) GetMintTransaction() string {
	if x != nil {
		return x.MintTransaction
	}
	return ""
}

func (x *Nft) GetTemplateType() string {
	if x != nil {
		return x.TemplateType
	}
	return ""
}

func (x *Nft) GetFeaturedByCreator() bool {
	if x != nil {
		return x.FeaturedByCreator
	}
	return false
}

func (x *Nft) GetNftOwners() []*NftOwner {
	if x != nil {
		return x.NftOwners
	}
	return nil
}

func (x *Nft) GetNftCollection() *NftCollection {
	if x != nil {
		return x.NftCollection
	}
	return nil
}

func (x *Nft) GetCreatedBy() *user.User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

type NftOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserWalletAddress string                 `protobuf:"bytes,2,opt,name=user_wallet_address,json=userWalletAddress,proto3" json:"user_wallet_address,omitempty"`
	Balance           int32                  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsHidden          bool                   `protobuf:"varint,6,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Transactions      []string               `protobuf:"bytes,7,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *NftOwner) Reset() {
	*x = NftOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftOwner) ProtoMessage() {}

func (x *NftOwner) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftOwner.ProtoReflect.Descriptor instead.
func (*NftOwner) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{5}
}

func (x *NftOwner) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NftOwner) GetUserWalletAddress() string {
	if x != nil {
		return x.UserWalletAddress
	}
	return ""
}

func (x *NftOwner) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *NftOwner) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NftOwner) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NftOwner) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *NftOwner) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type NftCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContractAddress string                 `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CreatorAddress  string                 `protobuf:"bytes,4,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedOnBlock  int32                  `protobuf:"varint,7,opt,name=updated_on_block,json=updatedOnBlock,proto3" json:"updated_on_block,omitempty"`
	Network         string                 `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	TokenType       string                 `protobuf:"bytes,9,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Origin          string                 `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *NftCollection) Reset() {
	*x = NftCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graph_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftCollection) ProtoMessage() {}

func (x *NftCollection) ProtoReflect() protoreflect.Message {
	mi := &file_graph_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftCollection.ProtoReflect.Descriptor instead.
func (*NftCollection) Descriptor() ([]byte, []int) {
	return file_graph_network_proto_rawDescGZIP(), []int{6}
}

func (x *NftCollection) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NftCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NftCollection) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *NftCollection) GetCreatorAddress() string {
	if x != nil {
		return x.CreatorAddress
	}
	return ""
}

func (x *NftCollection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NftCollection) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NftCollection) GetUpdatedOnBlock() int32 {
	if x != nil {
		return x.UpdatedOnBlock
	}
	return 0
}

func (x *NftCollection) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NftCollection) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *NftCollection) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

var File_graph_network_proto protoreflect.FileDescriptor

var file_graph_network_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x14, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x6c, 0x0a, 0x1a, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x0e, 0x6e, 0x66, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x66,
	0x74, 0x52, 0x0c, 0x6e, 0x66, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0xb9, 0x0a, 0x0a, 0x03, 0x4e, 0x66, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x65, 0x72, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x5f,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x68, 0x6f, 0x77, 0x4f, 0x6e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x41,
	0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0a,
	0x6e, 0x66, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x66, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x09, 0x6e, 0x66, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0e,
	0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x66, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x66, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x4e, 0x66, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x0d, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x32, 0x66, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_graph_network_proto_rawDescOnce sync.Once
	file_graph_network_proto_rawDescData = file_graph_network_proto_rawDesc
)

func file_graph_network_proto_rawDescGZIP() []byte {
	file_graph_network_proto_rawDescOnce.Do(func() {
		file_graph_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_graph_network_proto_rawDescData)
	})
	return file_graph_network_proto_rawDescData
}

var file_graph_network_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_graph_network_proto_goTypes = []interface{}{
	(*GetNetworkByUserIDRequest)(nil),  // 0: graph.GetNetworkByUserIDRequest
	(*OffsetPagination)(nil),           // 1: graph.OffsetPagination
	(*NetworkMembersInfoResponse)(nil), // 2: graph.NetworkMembersInfoResponse
	(*NetworkMemberUser)(nil),          // 3: graph.NetworkMemberUser
	(*Nft)(nil),                        // 4: graph.Nft
	(*NftOwner)(nil),                   // 5: graph.NftOwner
	(*NftCollection)(nil),              // 6: graph.NftCollection
	(*user.User)(nil),                  // 7: user.User
	(*timestamppb.Timestamp)(nil),      // 8: google.protobuf.Timestamp
}
var file_graph_network_proto_depIdxs = []int32{
	1,  // 0: graph.GetNetworkByUserIDRequest.pagination:type_name -> graph.OffsetPagination
	3,  // 1: graph.NetworkMembersInfoResponse.users:type_name -> graph.NetworkMemberUser
	7,  // 2: graph.NetworkMemberUser.user:type_name -> user.User
	4,  // 3: graph.NetworkMemberUser.nfts_in_common:type_name -> graph.Nft
	8,  // 4: graph.NetworkMemberUser.joined_on:type_name -> google.protobuf.Timestamp
	8,  // 5: graph.Nft.minted_on:type_name -> google.protobuf.Timestamp
	8,  // 6: graph.Nft.created_at:type_name -> google.protobuf.Timestamp
	8,  // 7: graph.Nft.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 8: graph.Nft.drop_at_time:type_name -> google.protobuf.Timestamp
	5,  // 9: graph.Nft.nft_owners:type_name -> graph.NftOwner
	6,  // 10: graph.Nft.nft_collection:type_name -> graph.NftCollection
	7,  // 11: graph.Nft.created_by:type_name -> user.User
	8,  // 12: graph.NftOwner.created_at:type_name -> google.protobuf.Timestamp
	8,  // 13: graph.NftOwner.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 14: graph.NftCollection.created_at:type_name -> google.protobuf.Timestamp
	8,  // 15: graph.NftCollection.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 16: graph.Network.GetNetworkByUserID:input_type -> graph.GetNetworkByUserIDRequest
	2,  // 17: graph.Network.GetNetworkByUserID:output_type -> graph.NetworkMembersInfoResponse
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_graph_network_proto_init() }
func file_graph_network_proto_init() {
	if File_graph_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_graph_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMembersInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMemberUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graph_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_graph_network_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_graph_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_graph_network_proto_goTypes,
		DependencyIndexes: file_graph_network_proto_depIdxs,
		MessageInfos:      file_graph_network_proto_msgTypes,
	}.Build()
	File_graph_network_proto = out.File
	file_graph_network_proto_rawDesc = nil
	file_graph_network_proto_goTypes = nil
	file_graph_network_proto_depIdxs = nil
}
